* Bitrans
  A bitcoin transaction script language / vm implementation in python.
  Built based on info from [[https://en.bitcoin.it/wiki/Script][the bitcoin wiki]].
  
* Getting it running
  - Install [[https://en.bitcoin.it/wiki/Bitcoind][bitcoind]]
  - Enable the bitcoin rpc server and historical transaction indexing in ~/bitcoin.conf by
     adding/uncommenting the following lines and replacing bracketed
     things:
     - txindex=1
     - server=1
     - rpcuser=[yourUser]
     - rpcpassword=[yourPass]
     - rpcport=8332
     - rpcconnect=127.0.0.1
  - Spin up a bitcoind daemon, rebuilding the historical index:
#+begin_src sh
bitcoind -daemon -reindex
#+end_src
  - Get bitrans:
#+begin_src sh
git clone https://github.com/hackscience/bitrans.git
cd bitrans
#+end_src     
  - Fire up python:
#+begin_src sh
python
#+end_src
  - Establish a connection to the bitcoind daemon
#+begin_src py
>>> import rpc
>>> s = rpc.jsonrpc("yourUser","yourPass")
#+end_src
  - Grab a transaction
#+begin_src py
>>> import transaction
>>> t = transaction.transaction('4ea20607ea2188dbb2454f6c00dd989124bfdf51d6e524a73df36688c35ff48e',s)
#+end_src
  - Verify the transaction:
#+begin_src py
t.verify()
#+end_src


* Description
  Here's how it works:

  There are three primary abstractions: opcodes, bytestreams, and
  machines.  A stream is a sequence of bytes; it is implemented as a
  wrapper around python strings of human readable hex (like 'AFAF').
  A machine consists of two stacks (a primary and alternative stack).
  An opcode takes a stream and a machine as input and does stuff
  (maybe mutates) one, both, or neither.

  Byte streams will be a mixture of opcodes and 'raw' data.  The
  elements of the stacks are themselves bytestreams.  Raw data is
  interpreted as variable-length little-endian signed integers.
  Opcodes are one-byte unsigned +little-endian+ big-endian ints.
  
  There doesn't seem to be any reason to compile anything.  A script
  is interpreted by continually reading an opcode from a stream
  representing the script and applying the opcode to the stream and a
  machine.  +I think scripts have headers but I haven't quite figured
  it out yet.+ (Multiple) scripts are embedded in transactions which
  provide some metadata.  A transaction is valid if all scripts do not
  fail during interpretation and the top stack item after
  interpretation is true.

* Structure
  + ops.py: Opcode implementations.
  + opfns.py: Implementations of the functions that opcodes are built from.
  + machine.py: Stack machine implementation.
  + bytestream.py: Bytestream implementation.
  + script.py: Implements a script.
  + transaction.py: Parses and represents entire transactions.

* Immediate todo
  + Implement remaining opfns and ops

* Fun todo
  + Write a higher-level representation which compiles to bytestreams.
  + Animate the process of interpreting a script.
  + Throw a whole bunch of garbage at the vm and see if anything
    causes it to lock up or overflow or something.
  + Just check my push priviledge. 



  
